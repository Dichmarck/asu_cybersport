# Generated by Django 4.0.5 on 2022-07-09 15:39

import cs.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('patronymic', models.CharField(blank=True, max_length=30, verbose_name='Отчество')),
                ('sex', models.CharField(choices=[('М', 'Мужской '), ('Ж', 'Женский')], max_length=1, verbose_name='Пол')),
                ('bio', models.TextField(blank=True, max_length=700, verbose_name='Доп. информация')),
                ('phone', models.CharField(blank=True, max_length=11, null=True, unique=True, verbose_name='Телефон')),
                ('stud_num', models.IntegerField(blank=True, null=True, verbose_name='Номер студ. билета')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Подтверждён')),
                ('slug', models.SlugField(unique=True, verbose_name='URL')),
                ('photo', models.ImageField(blank=True, null=True, upload_to=cs.models.User.get_upload_path, verbose_name='Фото')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(max_length=10, unique=True, verbose_name='Короткое название')),
                ('long_name', models.CharField(max_length=150, unique=True, verbose_name='Полное название')),
                ('descr_url', models.URLField(blank=True, verbose_name='Описание')),
                ('slug', models.SlugField(unique=True, verbose_name='URL')),
                ('photo', models.ImageField(upload_to=cs.models.Game.get_upload_path, verbose_name='Фото')),
            ],
            options={
                'verbose_name': 'Игра',
                'verbose_name_plural': 'Игры',
                'ordering': ['short_name', 'long_name'],
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_name', models.CharField(max_length=10, unique=True, verbose_name='Короткое название')),
                ('long_name', models.CharField(max_length=150, unique=True, verbose_name='Полное название')),
                ('slug', models.SlugField(unique=True, verbose_name='URL')),
                ('photo', models.ImageField(upload_to=cs.models.Team.get_upload_path, verbose_name='Фото')),
                ('time_create', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Создатель')),
                ('users', models.ManyToManyField(related_name='teams', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Команда',
                'verbose_name_plural': 'Команды',
                'ordering': ['-time_create', 'short_name', 'long_name', 'creator'],
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150, verbose_name='Заголовок')),
                ('prize_fund', models.TextField(blank=True, verbose_name='Призовой фонд')),
                ('prize_1', models.CharField(blank=True, max_length=255, verbose_name='Приз для 1-го места')),
                ('prize_2', models.CharField(blank=True, max_length=255, verbose_name='Приз для 2-го места')),
                ('prize_3', models.CharField(blank=True, max_length=255, verbose_name='Приз для 3-го места')),
                ('another_prizes', models.TextField(blank=True, verbose_name='Призы для дургих мест')),
                ('descr', models.TextField(verbose_name='Описание')),
                ('time_start', models.DateTimeField(verbose_name='Время начала')),
                ('team_members', models.PositiveSmallIntegerField(verbose_name='Участников в команде')),
                ('creator', models.TextField(max_length=100, verbose_name='Огранизатор')),
                ('contact', models.URLField(blank=True, verbose_name='Ссылка для связи')),
                ('contact_email', models.EmailField(max_length=254, verbose_name='Почта для связи')),
                ('time_create', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('time_changed', models.DateTimeField(auto_now=True, verbose_name='Время последнего редактирования')),
                ('is_published', models.BooleanField(default=False, verbose_name='Опубликовано')),
                ('slug', models.SlugField(unique=True, verbose_name='URL')),
                ('rules', models.FileField(blank=True, upload_to=cs.models.Tournament.get_rules_path, verbose_name='Правила')),
                ('photo', models.ImageField(upload_to=cs.models.Tournament.get_upload_path, verbose_name='Фото')),
                ('broadcast_url', models.URLField(blank=True, verbose_name='Ссылка на трансляцию')),
                ('game', models.ForeignKey(default='Игра не указана', on_delete=django.db.models.deletion.SET_DEFAULT, to='cs.game', verbose_name='Игра')),
                ('teams', models.ManyToManyField(related_name='tournaments', to='cs.team')),
            ],
            options={
                'verbose_name': 'Турнир',
                'verbose_name_plural': 'Турниры',
                'ordering': ['-time_start', 'game', '-prize_fund', 'creator'],
            },
        ),
        migrations.CreateModel(
            name='Tournament_Team_User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cs.team', verbose_name='Команда')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cs.tournament', verbose_name='Турнир')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Игрок')),
            ],
            options={
                'verbose_name': 'Туринр - команда - игрок',
                'verbose_name_plural': 'Туринры - команды - игроки',
                'ordering': ['tournament', 'team', 'user'],
            },
        ),
    ]
